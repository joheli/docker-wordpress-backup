#!/bin/bash

# load environment variables pertaining to wordpress (starting with "WORDPRESS_")
source <(sed -r -n 's/[^#]+/export &/ p' /setup/*.env)

# help
help () {
	echo -e "\n$0 usage:"
	echo -e "   switches:"
	echo -e "      -d         debug mode - only extract files"
	echo -e "      -f [File]  supply specific file to restore"
	echo -e "      -h         print this help"
	echo -e "      -i         init mode - do not run wordpress-config-wp" 
	echo -e "                 (-i is incompatible with -d)\n"
}

# clean up
cleanup () {
	CLEANDIR=$1
	if [ -d $CLEANDIR ]; then
		rm -R $CLEANDIR
	fi
}

# default values for DEBUG and INIT
DEBUG=false
INIT=false

# get options for debug and use a specific backup file
while getopts "df:hi" OPTION; do
        case $OPTION in
                d)
                        DEBUG=true
                        ;;
                f)
                        BACKUPFILE=$OPTARG
                        if [ ! -f $BACKUPFILE ]; then
                                echo "The supplied file $BACKUPFILE does not exist!"
                                exit 1
                        fi
                        ;;
		h)
			help
			exit 2
			;;
		i)	
			INIT=true
			;;
			
                \?)
                        help
                        exit 3
                        ;;
        esac
done

# checks
if [ ! -d ${WORDPRESS_BACKUP_DIR} ]; then
        echo "$0: backup directory ${WORDPRESS_BACKUP_DIR} does not exist!"
        exit 4
fi

if [ $(ls -1A ${WORDPRESS_BACKUP_DIR}/*7z | wc -l) -eq 0 ]; then
        echo "$0: backup directory ${WORDPRESS_BACKUP_DIR} does not contain any compressed backups!"
        exit 5
fi

# by default, the newest file in the backup directory is chosen
BACKUPFILE=$(ls ${WORDPRESS_BACKUP_DIR}/*.7z -t | head -n1)

# Timestamp etc.
TSTMP=$(date +"%Y%m%d_%H%M")
EXTRACTDIR=/tmp/${TSTMP}
UNTARDIR=${EXTRACTDIR}/untar

# extract to temporary directory and untar contents
7zr -o${EXTRACTDIR} e ${BACKUPFILE} && mkdir ${UNTARDIR} && tar -xf ${EXTRACTDIR}/*.tar -C ${UNTARDIR}
# Problem?
if [ $? -ne 0 ]; then
	echo "$0: there was a problem with extracting ${BACKUPFILE} to ${EXTRACTDIR}!"
	cleanup ${EXTRACTDIR}
	exit 6
fi

# pass files to restore scripts
if [ "$DEBUG" == false ]; then
	# restore db
        wordpress-restore-db-from-dump ${EXTRACTDIR}/*.sql ${EXTRACTDIR}/*.env
	# Problem?
	if [ $? -ne 0 ]; then
		echo "$0: there was a problem with processing sql dump files from ${EXTRACTDIR}!"
		cleanup ${EXTRACTDIR}
		exit 7
	fi

	# remove and recreate install directory
	if [ -d ${WORDPRESS_INSTALL_PATH} ]; then
		rm -R ${WORDPRESS_INSTALL_PATH}
		echo "$0: install directory ${WORDPRESS_INSTALL_PATH} removed"
		mkdir -p ${WORDPRESS_INSTALL_PATH}
		echo "$0: install directory ${WORDPRESS_INSTALL_PATH} recreated"
	else
		mkdir -p ${WORDPRESS_INSTALL_PATH}
		echo "$0: previously not existing install directory ${WORDPRESS_INSTALL_PATH} created"
	fi
	# Problem?
	if [ $? -ne 0 ]; then
		echo "$0: there was a problem with preparing ${WORDPRESS_INSTALL_PATH}!"
		cleanup ${EXTRACTDIR}
		exit 8
	fi

	# copy contents of $UNTARDIR into $WORDPRESS_INSTALL_PATH
	cp -a ${UNTARDIR}/. ${WORDPRESS_INSTALL_PATH}
	# Problem?
	if [ $? -ne 0 ]; then
		echo "$0: there was a problem with copying files from ${UNTARDIR} to ${WORDPRESS_INSTALL_PATH}!"
		cleanup ${EXTRACTDIR}
		exit 9
	fi

	# configure wordpress (unless in "init mode")
	if [ "$INIT" == false ]; then
		wordpress-configure-wp
		# Problem?
		if [ $? -ne 0 ]; then
			echo "$0: there was a problem with configuring worpress files using wordpress-configure-wp!"
			exit 10
		else 
			echo "$0: wordpress backup has successfully been restored from $BACKUPFILE."
		fi
	fi
fi

cleanup ${EXTRACTDIR}

exit 0

